datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  havStore    Boolean  @default(false)
  worksWith   String? // يستخدم لتحديد نوع العمل (delivery/store)
  workInStore Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveryOrders Order[] @relation("DeliveryOrders")
  stores         Store[]
  Order          Order[]
}

model Store {
  id            String         @id @default(uuid())
  name          String
  description   String?
  storeImage    String?
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  products      Product[]
  notfication   Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  storeBanner   StoreBanner?   @relation(fields: [storeBannerId], references: [id])
  storeBannerId String?        @unique
  Workers       Workers[]
}

model Workers {
  id      String  @id @default(uuid())
  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?
  userId  String?
}

model Notification {
  id          String   @id @default(uuid())
  title       String   @default("no title")
  username    String?
  useremail   String?
  description String?
  markAsRead  Boolean?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  storeId     String
  userId      String?
  store       Store    @relation(fields: [storeId], references: [id])
}

model StoreBanner {
  id               String  @id @default(uuid())
  bannerImage      String?
  bannerTitle      String?
  bannerDescrip    String?
  height           Float?  @default(400)
  titleColor       String?
  titleSize        Float?
  descriptionColor String?
  descriptionSize  Float?
  store            Store?  @relation
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  rating      Float?
  sales       Float          @default(0)
  fileUrl     String?
  store       Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderItems  OrderItem[]
  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}



model Order {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  totalAmount    Float       @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  items          OrderItem[]
  delivered      Boolean     @default(false)
  deliveryUser   User?       @relation("DeliveryOrders", fields: [deliveryUserId], references: [id])
  deliveryUserId String? // المستخدم المسؤول عن التوصيل
  storeId        String // المتجر الذي ينتمي إليه الطلب
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  delivered Boolean  @default(false)
}
