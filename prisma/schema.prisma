datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts  Cart[]
  orders Order[]
  stores Store[]
}

model Store {
  id            String       @id @default(uuid())
  name          String
  description   String?
  storeImage    String?
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  products      Product[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  storeBanner   StoreBanner? @relation(fields: [storeBannerId], references: [id])
  storeBannerId String?      @unique
}

model StoreBanner {
  id               String  @id @default(uuid())
  bannerImage      String?
  bannerTitle      String? 
  bannerDescrip    String?
  height           Float? @default(400)
  titleColor       String? 
  titleSize        Float? 
  descriptionColor String?
  descriptionSize  Float?
  store            Store?  @relation
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  fileUrl     String?
  store       Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}
